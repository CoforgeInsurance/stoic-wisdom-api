name: Build and Deploy to Azure

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'migrations/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/azure-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'migrations/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/azure-deploy.yml'
  workflow_dispatch:

env:
  IMAGE_NAME: stoic-wisdom-api

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Build
        run: cargo build --release

      - name: Run tests
        run: cargo test --release

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.AZURE_ACR_NAME }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                     ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy to Azure Container Instances
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Instances
        run: |
          # Get ACR credentials
          ACR_USERNAME=$(az acr credential show --name ${{ secrets.AZURE_ACR_NAME }} --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ secrets.AZURE_ACR_NAME }} --query "passwords[0].value" -o tsv)
          
          # Delete existing container instance if it exists
          az container delete \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_ACI_NAME }} \
            --yes || true
          
          # Create new container instance
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_ACI_NAME }} \
            --image ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            --os-type Linux \
            --registry-login-server ${{ secrets.AZURE_ACR_NAME }}.azurecr.io \
            --registry-username $ACR_USERNAME \
            --registry-password $ACR_PASSWORD \
            --dns-name-label ${{ secrets.AZURE_ACI_NAME }} \
            --ports 3000 \
            --cpu 0.5 \
            --memory 0.5 \
            --environment-variables \
              DATABASE_URL=sqlite:/data/stoic_wisdom.db \
              PORT=3000 \
              RUST_LOG=info

      - name: Get deployment URL
        run: |
          FQDN=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_ACI_NAME }} \
            --query "ipAddress.fqdn" \
            --output tsv)
          echo "API deployed to: http://$FQDN:3000"
          echo "Health check: http://$FQDN:3000/health"

      - name: Wait for readiness & run smoke tests
        run: |
          set -e
          FQDN=$(az container show \
             --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
             --name ${{ secrets.AZURE_ACI_NAME }} \
             --query "ipAddress.fqdn" -o tsv)
          echo "Waiting for readiness..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$FQDN:3000/ready || true)
            if [ "$STATUS" = "200" ]; then
              echo "Ready endpoint returned 200"; break; fi; sleep 2; done
          if [ "$STATUS" != "200" ]; then echo "Readiness check failed"; exit 1; fi

          echo "Checking health endpoint"
          curl -v http://$FQDN:3000/health || { echo "Health check failed"; exit 1; }

          echo "Request random quote"
          QUOTE_JSON=$(curl -s http://$FQDN:3000/quotes/random || true)
          echo "Random quote response: $QUOTE_JSON"
          if echo "$QUOTE_JSON" | grep -qi 'no such table'; then
            echo "Database not migrated correctly"; exit 1; fi
          if [ -z "$QUOTE_JSON" ]; then echo "Empty quote response"; exit 1; fi

          echo "Smoke tests passed"
